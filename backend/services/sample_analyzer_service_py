{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/B0ss-M/Live2MPC/blob/main/backend/services/sample_analyzer_service_py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import librosa\n",
        "import numpy as np\n",
        "from tempfile import NamedTemporaryFile\n",
        "from pydantic import BaseModel\n",
        "from typing import Optional\n",
        "\n",
        "class SampleAnalysis(BaseModel):\n",
        "    pitch: Optional[str]\n",
        "    key: Optional[str]\n",
        "\n",
        "class SampleAnalyzerService:\n",
        "    def analyze_sample(self, file_path: str) -> SampleAnalysis:\n",
        "        \"\"\"\n",
        "        Analyzes an audio sample to determine its pitch and key.\n",
        "\n",
        "        Args:\n",
        "            file_path: The path to the audio file.\n",
        "\n",
        "        Returns:\n",
        "            A SampleAnalysis object containing the detected pitch and key.\n",
        "        \"\"\"\n",
        "        try:\n",
        "            # Load the audio file\n",
        "            y, sr = librosa.load(file_path)\n",
        "\n",
        "            # Detect the pitch\n",
        "            pitch = self.detect_pitch(y, sr)\n",
        "\n",
        "            # Detect the key\n",
        "            key = self.detect_key(y, sr)\n",
        "\n",
        "            return SampleAnalysis(pitch=pitch, key=key)\n",
        "        except Exception as e:\n",
        "            print(f\"Error analyzing sample: {e}\")\n",
        "            return SampleAnalysis(pitch=None, key=None)\n",
        "\n",
        "    def detect_pitch(self, y: np.ndarray, sr: int) -> Optional[str]:\n",
        "        \"\"\"\n",
        "        Detects the pitch of an audio signal.\n",
        "\n",
        "        Args:\n",
        "            y: The audio time series.\n",
        "            sr: The sampling rate.\n",
        "\n",
        "        Returns:\n",
        "            The detected pitch as a string (e.g., \"C4\"), or None if no pitch is detected.\n",
        "        \"\"\"\n",
        "        # Compute the pitch using the YIN algorithm\n",
        "        f0, voiced_flag, voiced_probs = librosa.pyin(y, fmin=librosa.note_to_hz('C2'), fmax=librosa.note_to_hz('C7'))\n",
        "\n",
        "        # Get the median pitch of the voiced segments\n",
        "        median_f0 = np.median(f0[voiced_flag])\n",
        "\n",
        "        if not np.isnan(median_f0):\n",
        "            # Convert the frequency to a MIDI note\n",
        "            midi_note = librosa.hz_to_midi(median_f0)\n",
        "            # Convert the MIDI note to a note name\n",
        "            return librosa.midi_to_note(midi_note)\n",
        "        else:\n",
        "            return None\n",
        "\n",
        "    def detect_key(self, y: np.ndarray, sr: int) -> Optional[str]:\n",
        "        \"\"\"\n",
        "        Detects the key of an audio signal.\n",
        "\n",
        "        Args:\n",
        "            y: The audio time series.\n",
        "            sr: The sampling rate.\n",
        "\n",
        "        Returns:\n",
        "            The detected key as a string (e.g., \"C Major\"), or None if no key is detected.\n",
        "        \"\"\"\n",
        "        # Compute the chromagram\n",
        "        chromagram = librosa.feature.chroma_cqt(y=y, sr=sr)\n",
        "\n",
        "        # Estimate the key from the chromagram\n",
        "        key_estimate = librosa.feature.key_mode(chromagram=chromagram)\n",
        "\n",
        "        if key_estimate:\n",
        "            # Convert the key to a human-readable format\n",
        "            key_map = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B']\n",
        "            key = key_map[key_estimate[0]]\n",
        "            mode = \"Major\" if key_estimate[1] == 0 else \"Minor\"\n",
        "            return f\"{key} {mode}\"\n",
        "        else:\n",
        "            return None"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "id": "0nGo996jBWgO"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}